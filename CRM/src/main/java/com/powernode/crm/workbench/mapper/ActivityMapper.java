package com.powernode.crm.workbench.mapper;

import com.powernode.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table tbl_activity
         *
         * @mbggenerated Fri Oct 20 10:26:08 CST 2023
         */
        int deleteByPrimaryKey(String id);

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table tbl_activity
         *
         * @mbggenerated Fri Oct 20 10:26:08 CST 2023
         */
        int insert(Activity record);

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table tbl_activity
         *
         * @mbggenerated Fri Oct 20 10:26:08 CST 2023
         */
        int insertSelective(Activity record);

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table tbl_activity
         *
         * @mbggenerated Fri Oct 20 10:26:08 CST 2023
         */
        Activity selectByPrimaryKey(String id);

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table tbl_activity
         *
         * @mbggenerated Fri Oct 20 10:26:08 CST 2023
         */
        int updateByPrimaryKeySelective(Activity record);

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table tbl_activity
         *
         * @mbggenerated Fri Oct 20 10:26:08 CST 2023
         */
        int updateByPrimaryKey(Activity record);

        /**
         * 添加一个新的活动--->用于创建市场活动
         * @param activity
         * @return
         */
        int insertActivity(Activity activity);

        /**
         *根据条件分页查询市场活动的列表--->用于市场活动分页
         * @param map
         * @return
         */
        List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

        /**
         * 根据条件查询市场活动的总条数--->用于抽象市场活动的总数
         * @param map
         * @return
         */
        int selectCountOfActivityByCondition(Map<String,Object> map);

        /**
         * 根据id删除市场活动的信息--->用于删除市场活动
         * @param ids
         * @return
         */
        int deleteActivityByIds(String[] ids);

        /**
         * 根据id查询市场活动--->用于根据id查询市场活动
         * @param id
         * @return
         */
        Activity selectActivityById(String id);

        /**
         * 更新市场活动--->用于更新市场活动
         * @param activity
         * @return
         */
        int updateActivity(Activity activity);

        /**
         * 查询所有市场活动--->用于导出全部市场活动
         * @return
         */
        List<Activity> selectAllActivities();

        /**
         * 查询需要市场活动--->用于导出需要的部分市场活动
         * @return
         */
        List<Activity> selectNeedActivities(String[] ids);


        /**
         * 批量保存市场活动
         * @param activityList
         * @return
         */
        int insertActivityByList(List<Activity> activityList);

        /**
         * 根据id查询市场活动的具体信息--->用于查看市场活动详情
         * @param id
         * @return
         */
        Activity selectActivityForDetailById(String id);

        /**
         * 根据clueId查询该线索相关联的市场活动的明细信息
         * @param clueId
         * @return
         */
        List<Activity> selectActivityForDetailByClueId(String clueId);

        /**
         * 根据name模糊查询市场活动，并且把已经跟clueId关联过的市场活动排除
         * @param map
         * @return
         */
        List<Activity> selectActivityForDetailByNameClueId(Map<String,Object> map);

        /**
         * 根据ids查询市场活动的明细信息(查询多个市场活动)
         * @param ids
         * @return
         */
        List<Activity> selectActivityForDetailByIds(String[] ids);

        /**
         * 根据name模糊查询市场活动，并且查询那些跟clueId关联过的市场活动
         * @param map
         * @return
         */
        List<Activity> selectActivityForConvertByNameClueId(Map<String,Object> map);


        /**
         * 根据contactsId查询该联系人相关联的市场活动的明细信息
         * @param contactsId
         * @return
         */
        List<Activity> selectActivityForDetailByContactsId(String contactsId);

        /**
         * 根据name模糊查询市场活动，并且把已经跟contactsId关联过的市场活动排除
         * @param map
         * @return
         */
        List<Activity> selectActivityForDetailByNameContactsId(Map<String,Object> map);


        /**
         * 根据name模糊查询市场活动
         * @param activityName
         * @return
         */
        List<Activity> selectActivityByActivityName(String activityName);

}
